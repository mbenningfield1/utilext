#===============================================================================
#
# Written by: Mark Benningfield
#
# LICENSE: Public Domain -- see the file LICENSE.txt
#
#===============================================================================
#
# Tests for the padright() function
#
#===============================================================================

source errors.tcl
setup db


test str_padright-1.0 {Verify NULL return for NULL source arg} -body {
  return [elem0 [db eval {select padright(NULL, 3);}]]
} -result NULL


test str_padright-1.1 {Verify source return for NULL length arg} -body {
  return [elem0 [db eval {select padright('Saphire', NULL);}]]
} -result Saphire


test str_padright-1.2 {Verify source return with source length longer than length arg} -body {
  return [elem0 [db eval {select padright('Hello World', 7);}]]
} -result {Hello World}


test str_padright-1.3 {Verify correct padding} -body {
  return [elem0 [db eval {select padright('Cobalt', 12);}]]
} -result {Cobalt      }


test str_padright-1.4 {Verify source return on zero length arg} -body {
  return [elem0 [db eval {select padright('Amethyst', 0);}]]
} -result Amethyst


test str_padright-1.5 {Verify error on too low length arg} -body {
  db eval {select padright('French Fries', -1);}
} -returnCodes 1 -result $SqliteMisuse


test str_padright-1.6 {Verify correct padding with unicode chars} -body {
  setup_unicode8 pdb
  set a [pdb eval {select padright(source, 34) from test_padright where id = 1;}]
  set b [pdb eval {select result from test_padright where id = 1;}]
  pdb close
  return [string equal $a $b]
} -result {1}


test str_padright-1.7 {Verify source return with length less than character count} -body {
  setup_unicode8 pdb
  set a [pdb eval {select padright(source, 26) from test_padright where id = 2;}]
  set b [pdb eval {select result from test_padright where id = 2;}]
  pdb close
  return [string equal $a $b]
} -result {1}


db close
tcltest::cleanupTests


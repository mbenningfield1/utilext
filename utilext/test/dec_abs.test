#===============================================================================
#
# Written by: Mark Benningfield
#
# LICENSE: Public Domain -- see the file LICENSE.txt
#
#===============================================================================
#
# Tests for the dec_abs() function
#
#===============================================================================
 
source errors.tcl
setup db


test formats {Test the various positive and negative numeric formats} -body {
  set formats {
    1.0 -1.0 001.0 -001.0 (1.0) (01.0) 1.0e3 -1.0e3 1.0E3 001.0e3 -001.0e3 1.0e+3
    -1.0e+3 1.0e-3 -1.0e-3 $1.0 -$1.0 ($1.0) $(1.0) 1 -1 01 -01 $01.0 -$01.0
    ($01.0) $(01.0) 0 -0 .5
  }

  set values {
    1.0 1.0 1.0 1.0 1.0 1.0 1000 1000 1000 1000 1000 1000 1000 0.0010 0.0010
    1.0 1.0 1.0 1.0 1 1 1 1 1.0 1.0 1.0 1.0 0 0 0.5
  }
  for {set i 0} {$i < [llength formats]} {incr i} {
    set a [lindex $formats $i]
    set b [lindex $values $i]
    set c [elem0 [db eval {select dec_abs(:a);}]]
    if {$c ne $b} {puts "test_formats failed with i = $i"}
  }
} -output {} -result {}


# Verifies that a float argument is converted to text and recognized; a float
# value that is only approximately converted to text will produce the wrong
# result
test real {Verify float conversion} -body {
  return [elem0 [db eval {select dec_abs(-1.34);}]]
} -result 1.34


test int {Verify integer conversion} -body {
  return [elem0 [db eval {select dec_abs(-2);}]]
} -result 2


test parse_invalid {Verify parse error on non-numeric input} -body {
  db eval {select dec_abs('fred');}
} -returnCodes 1 -result $SqliteFormat


test parse_range {Verify parse error on input too large} -body {
  db eval {select dec_abs('236598745842154879568954125489');}
} -returnCodes 1 -result $SqliteFormat


db close
tcltest::cleanupTests

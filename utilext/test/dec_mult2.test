#===============================================================================
#
# Written by: Mark Benningfield
#
# LICENSE: Public Domain -- see the file LICENSE.txt
#
#===============================================================================
#
# Tests for the multi-arg dec_mult() function using UTF-16 database encoding
#
#===============================================================================

source errors.tcl
setup_16 db


test dec_mult-2.0 {Verify NULL return with NULL args} -body {
  return [elem0 [db eval {select dec_mult(NULL, NULL, NULL, NULL);}]]
} -result NULL


test dec_mult-2.1 {Verify NULL args are ignored with non-NULLs} -body {
  return [elem0 [db eval {select dec_mult('3.2', '4.5', NULL, '1.6');}]]
} -result 23.040


test dec_mult-2.2 {Verify NULL return with zero arguments} -body {
  return [elem0 [db eval {select dec_mult();}]]
} -result NULL


test dec_mult-2.3 {Verify correct result with only one argument} -body {
  return [elem0 [db eval {select dec_mult('4.55');}]]
} -result 4.55


test dec_mult-2.4 {Multiply some numbers} -body {
  return [elem0 [db eval {select dec_mult('4.5', '2.3', '.5');}]]
} -result 5.175


test dec_mult-2.5 {Verify range error on too large result} -body {
  db eval {select dec_mult('39614081257132168796771975168', '2.5');}
} -returnCodes 1 -result $SqliteTooBig


test dec_mult-2.6 {Verify range error on too small result} -body {
  db eval {select dec_mult('-39614081257132168796771975168', '2.5');}
} -returnCodes 1 -result $SqliteTooBig


test dec_mult-2.7 {Verify that we can handle up to max function args} -body {
  set values {
    1.0 1.4 1.2 1.1 1.0 1.1 1.2 1.3 1.1 2.0 1.5 2.3 1.4 2.2 1.2 2.3 2.5 1.2 2.0
    2.1 1.4 2.3 1.1 1.2 2.0 1.4 2.2 2.2 1.4 1.3 1.4 2.0 1.4 2.1 1.0 1.1 2.1 2.4
    1.1 1.1 2.2 2.2 1.5 2.1 1.4 1.4 2.0 2.2 2.4 1.4 2.5 1.3 1.4 1.2 1.1 1.0 2.5
    1.0 2.2 2.3 2.2 1.2 2.1 1.3 1.3 2.1 1.2 2.4 1.0 1.3 2.3 2.4 2.5 1.5 1.4 1.2
    1.2 1.1 2.4 2.4 1.3 1.4 1.5 1.0 1.2 2.5 1.0 2.0 2.2 2.5 1.2 2.3 1.1 1.3 1.2
    2.2 1.3 1.1 2.5 1.3 2.0 2.4 1.3 1.5 2.5 2.1 2.4 2.5 2.2 2.1 2.2 2.5 1.1 1.3
    2.4 1.4 1.2 2.0 2.5 1.4 1.1 1.2 2.3 2.3 2.2 1.0 1.1
  }
  
  set results {
    0 1.40 1.680 1.8480 1.84800 2.032800 2.4393600
    3.17116800 3.488284800 6.9765696000 10.46485440000
    24.069165120000 33.6968311680000 74.13302856960000
    88.959634283520000 204.6071588520960000 511.51789713024000000
    613.821476556288000000 1227.6429531125760000000
    2578.05020153640960000000 3609.270282150973440000000
    8301.3216489472389120000000 9131.45381384196280320000000
    10957.744576610355363840000000 21915.489153220710727680000000
    30681.684814508995018752000000 67499.706591919789041254400000
    148499.35450222353589075968000 207899.09630311295024706355200
    270268.82519404683532118261760 378376.35527166556944965566464
    756752.71054333113889931132928 1059453.7947606635944590358610
    2224852.9689973935483639753081 2224852.9689973935483639753081
    2447338.2658971329032003728389 5139410.3583839790967207829617
    12334584.860121549832129879108 13568043.346133704815342867019
    14924847.680747075296877153721 32834664.897643565653129738186
    72236262.774815844436885424009 108354394.16222376665532813601
    227544227.74066990997618908562 318561918.83693787396666471987
    445986686.37171302355333060782 891973372.7434260471066612156
    1962341420.0355373036346546743 4709619408.0852895287231712183
    6593467171.3194053402124397056 16483667928.298513350531099264
    21428768306.788067355690429043 30000275629.503294297966600660
    36000330755.403953157559920792 39600363830.944348473315912871
    39600363830.944348473315912871 99000909577.36087118328978218
    99000909577.36087118328978218 217802001070.19391660323752080
    500944602461.44600818744629784 1102078125415.1812180123818552
    1322493750498.2174616148582262 2777236876046.2566693912022750
    3610407938860.1336702085629575 4693530320518.1737712711318448
    9856413673088.164919669376874 11827696407705.797903603252249
    28386471378493.914968647805398 28386471378493.914968647805398
    36902412792042.089459242147017 84875549421696.80575625693814
    203701318612072.33381501665154 509253296530180.83453754162885
    763879944795271.25180631244328 1069431922713379.7525288374206
    1283318307256055.7030346049047 1539981968707266.8436415258856
    1693980165577993.5280056784742 4065552397387184.4672136283381
    9757325753729242.721312708011 12684523479848015.537706520414
    17758332871787221.752789128580 26637499307680832.629183692870
    26637499307680832.629183692870 31964999169216999.155020431444
    79912497923042497.88755107861 79912497923042497.88755107861
    159824995846084995.77510215722 351614990861386990.70522474588
    879037477153467476.7630618647 1054844972584160972.1156742376
    2426143436943570235.8660507465 2668757780637927259.4526558212
    3469385114829305437.2884525676 4163262137795166524.7461430811
    9159176703149366354.441514778 11906929714094176260.773969211
    13097622685503593886.851366132 32744056713758984717.128415330
    42567273727886680132.266939929 85134547455773360264.53387986
    204322913893856064634.88131166 265619788062012884025.34570516
    398429682093019326038.01855774 996074205232548315095.0463944
    2091755830988351461699.5974282 5020213994372043508079.0338277
    12550534985930108770197.584569 27611176969046239294434.686052
    57983471634997102518312.840709 127563637596993625540288.24956
    318909093992484063850720.62390 350800003391732470235792.68629
    456040004409252211306530.49218 1094496010582205307135673.1812
    1532294414815087429989942.4537 1838753297778104915987930.9444
    3677506595556209831975861.8888 9193766488890524579939654.722
    12871273084446734411915516.611 14158400392891407853107068.272
    16990080471469689423728481.926 39077185084380285674575508.430
    89877525694074657051523669.39 197730556526964245513352072.66
    197730556526964245513352072.66 217503612179660670064687279.93
  }

  set n [db limit function_arg -1]
  for {set i 1} {$i < $n} {incr i} {
    set args [string cat [join [lrange $values 0 $i] {', '}] "');"]
    set query [string cat "select dec_mult('" $args]
    set a [db eval $query]
    set b [lindex $results $i]
    if {$a ne $b} {puts "test_max_args failed with i = $i"}
  }
} -output {} -result {}


test dec_mult-2.8 {Verify parse error on non-numeric args} -body {
  db eval {select dec_mult('3.2', '5.6', 'fred');}
} -returnCodes 1 -result $SqliteFormat


db close
tcltest::cleanupTests
